/* I was trying to do my own XML reader
but failed spectactulary...

Maybe next time : P
For now, i am using libxml2. (Does the job good enough)
*/
/* HTML */
void old_Read_HTMLFile(char* string, int size)
{
	int i, a;
	int match;
	unsigned short result;
	char tmp_str[2048];
	int value_compare;
	uint64_t tag_counter = 0;
	uint64_t tag_hold_status = 0;
	uint64_t tag_hold_status_2 = 0;
	unsigned char tag_search_status = 0;
	char html_tag[6] = "<html";
	char *pch;
	int confirm = 0;
	
	char available_tags[8][8] =
	{
		"html",
		"title",
		"header",
		"meta",
		"style",
		"script",
		"body",
		"head"
	};
	
	match = 0;

	pch = strstr(string, html_tag);
	if (pch)
	{
		printf("<html is at %d\n", pch - string);
		
		files_html[tag_counter].begin_tags_position = (pch - string) - 1;
		
		for(i=(pch - string);i<size;i++)
		{
			switch(tag_search_status)
			{
				
				/* BEGIN TAG */
				
				/* Search for < (BEGIN tag) */
				case 0:
					printf("\n\nTraverse %c, %d\n", string[i], i);
					if (string[i] == '<')
					{
						if (string[i+1] != '/')
						{
							files_html[tag_counter].begin_tags_position = i;
							tag_search_status = 1;
							printf("\nFound < for BEGIN tag, Pos %d, %c\n\n", i, string[i+1]);
						}
					}
				break;
				
				/* Check for > (BEGIN tag) */
				case 1:
					if (string[i] == '>')
					{
						printf("Check for > (beginning) DONE, pos %d\n", i);
						files_html[tag_counter].begin_size_of_tag = (i - files_html[tag_counter].begin_tags_position) + 1;
						i = files_html[tag_counter].begin_tags_position;
						confirm = 0;
						goto check_type;
					}
				break;
				
				/* Going through the tag (BEGIN tag) */
				case 2:
					if (string[i] == '>')
					{
						tag_search_status = 0;
						printf("Going through the tag (BEGIN tag), pos %d\n", i);
					}
				break;
				
				/* Check for (BEGIN tag) type */
				case 3:
check_type:
					printf("\n\nSize is %d\n\n", files_html[tag_counter].begin_size_of_tag);
					memset(tmp_str, 0, sizeof(tmp_str));
					memcpy(tmp_str, string + i, 7);
					printf("Content is : \n %s\n\n", tmp_str);
					for(a=0;a<8;a++)
					{
						pch = strstr(tmp_str, available_tags[a]);
						if (pch)
						{
							files_html[tag_counter].type = a;
							printf("Type is %d, %s\n", a, available_tags[a]);
							confirm = Check_no_return_type(a);
							break;
						}
					}

					switch(confirm)
					{
						default:
						printf("Check for (BEGIN tag) type FAILED, FILE IS INVALID\n");
						goto done;
						break;
						case 1:
							printf("Now let's look for < (End tag)\n");
							i = files_html[tag_counter].begin_tags_position;
							tag_search_status = 4;
						break;
						case 2:
							/* We found a tag so it is valid */
							tag_counter++;
							i = (files_html[tag_counter].begin_tags_position + files_html[tag_counter].begin_size_of_tag) + 1;
							files_html[tag_counter].end_tags_position = files_html[tag_counter].begin_tags_position;
							files_html[tag_counter].end_size_of_tag = files_html[tag_counter].begin_size_of_tag;
							tag_search_status = 0;
							printf("META tag has no ending tag so let's end sooner\n");
						break;
					}

				break;

				/* END TAG */

				/* Search for < (End tag) */
				case 4:
					if (string[i] == '<')
					{
						if (string[i+1] == '/')
						{
							printf("Finding / in file, pos %d\n", i);
							files_html[tag_counter].end_tags_position = i;
							tag_search_status = 5;	
						}
					}
				break;
				/* Check for > (End tag) */
				case 5:
					if (string[i] == '>')
					{
						printf("End of Check for > (End tag) over, pos %d\n", i);
						tag_search_status = 2;
						files_html[tag_counter].end_size_of_tag = (i - files_html[tag_counter].end_tags_position) + 1;
						i = (files_html[tag_counter].begin_tags_position + files_html[tag_counter].begin_size_of_tag) + 1;
						/* We found a tag so it is valid */
						tag_counter++;
						
						printf("We have found %d tags\n", tag_counter);
					}
				break;
			}
		}
		goto done;
	}
	else
	{
		printf("FILE IS INVALID\n");
		return;
	}
	
done:
	printf("We found %d tags ! \n", tag_counter);

	/* This is the code that crawls through the HTTP file and tries to find the magic 
	 * for image URL links. We must also exclude thumbnails.
	 * I noticed that the image URL links were not HTTPS protected (bad !) so i'm relying on that.
	 * When this gets fixed, i'll have to find another way. (Which i'm sure won't be too hard)
	 * */
	/*for(i=1;i<size;i++)
	{
		if (string[i] == '<')
		{
			files_html[tag_counter].tags_position = i;
			tag_counter++;
			
		}
	}*/
}
